// Code generated by mockery v2.36.0. DO NOT EDIT.

package esgenerics

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore[E Entity[M], M interface{}] struct {
	mock.Mock
}

// ExecuteSearch provides a mock function with given fields: ctx, handler
func (_m *MockStore[E, M]) ExecuteSearch(ctx context.Context, handler QueryHandler) (*Result[E, M], error) {
	ret := _m.Called(ctx, handler)

	var r0 *Result[E, M]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, QueryHandler) (*Result[E, M], error)); ok {
		return rf(ctx, handler)
	}
	if rf, ok := ret.Get(0).(func(context.Context, QueryHandler) *Result[E, M]); ok {
		r0 = rf(ctx, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Result[E, M])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, QueryHandler) error); ok {
		r1 = rf(ctx, handler)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore[E Entity[M], M interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore[E, M] {
	mock := &MockStore[E, M]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
